@specification 1.1 
@param ( name = scenario ) 
@param ( name = session ) 
@param ( name = user ) 
@param ( name = absensetype ) 
@disabled /EBSArea/Finance/PageObjects/login.task ( environment #= '="SIT"' , scenario #= '=scenario' , session #= '=session' , user #= '=user' , password #= '="Welcome123"' ) 
web.switch ( session = session ) 
@name ( 'Create Employee AnnualLeave Exceed Balance' ) try {
	'Navigate to Absense Home Page' {
		@disabled @name ( 'Navigate to Create Absense' ) /EBSArea/Finance/PageObjects/navigateMenuItems.task ( scenario #= '=scenario' , session #= '=session' , mainMenu #= '="RCUK Self-Service Employee"' , itemId #= '="RCUK Self-Service EmployeeAll Actions Awaiting Your AttentionPersonal InformationDisabilityMy InformationPayslipSalary Bank Details"' , itemName #= '="Attendance Management"' ) 
		@name ( 'Click Entitlement Absense' ) /EBSArea/lib/web/click/click_link.task ( scenario = scenario , session = session , name = 'Entitlement Balances' ) 
		@name ( 'Click Show Accural Balances' ) /EBSArea/lib/web/click/click_link.task ( scenario = scenario , session = session , name = 'Show Accrual Balances' ) 
		@name ( 'Read UKRI AnnualLeave Scheme' ) UKRIAnnualLeave = /EBSArea/lib/web/text/read_text.task ( scenario = scenario , session = session , field = 'UKRI AnnualScheme' , xPath = 'UKRI Annual Leave Days Scheme' ) 
		@name ( 'AssertConfirmationMessage' ) assert.true ( expression = 'UKRIAnnualLeave=="UKRI Annual Leave Days Scheme"' ) 
		@name ( 'Read AnnuaLeaveBalance' ) ReadAnnualleavebalance = /EBSArea/lib/web/text/read_text.task ( scenario = scenario , session = session , field = 'AnnualLeaveInitialbalance' , xPath = 'Annual leave initial balance' ) 
		assert.true ( expression = 'ReadAnnualleavebalance=="Annual leave initial balance"' ) 
		@name ( 'Read AnnualLeaveTaken' ) ReadAnnualleaveTaken = /EBSArea/lib/web/text/read_text.task ( scenario = scenario , session = session , field = 'AnnualleaveTaken' , xPath = 'Annual leave taken' ) 
		assert.true ( expression = 'ReadAnnualleaveTaken=="Annual leave taken"' ) 
		@name ( 'Read AnnualLeaveBooked' ) ReadAnnualleavebooked = /EBSArea/lib/web/text/read_text.task ( scenario = scenario , session = session , field = 'Annualleavebooked' , xPath = 'Annual leave booked' ) 
		assert.true ( expression = 'ReadAnnualleavebooked=="Annual leave booked"' ) 
		@name ( 'Read AnnualLeaveRemaining' ) ReadAnnualleaveremaining = /EBSArea/lib/web/text/read_text.task ( scenario = scenario , session = session , field = 'AnnualleaveRemaining' , xPath = 'Annual leave remaining' ) 
		assert.true ( expression = 'ReadAnnualleaveremaining =="Annual leave remaining"' ) 
		@name ( 'Read AnnualLeaves' ) readRemainingAnnualLeaves = /EBSArea/lib/web/text/read_table_text.task ( scenario = scenario , session = session , field = 'Annual leave remaining' , xPath = "//*[contains(text(),'Annual leave remaining')]//ancestor::tr[2]/td[3]//span" ) 
		remainingAnnualLeaves = control.evaluate ( expression = 'def remainingAnnualLeaves = readRemainingAnnualLeaves as int

return remainingAnnualLeaves' ) 
		if ^remainingAnnualLeaves > 1^ {
			@name ( 'Click Absense Summary' ) /EBSArea/lib/web/click/click_link.task ( scenario = scenario , session = session , name = 'Absence Summary' ) 
			@name ( 'Click Create Absense' ) /EBSArea/lib/web/button/click_button.task ( scenario = scenario , session = session , name = 'Create Absence' ) 
			@name ( 'Select Absense Type' ) /EBSArea/lib/web/dropdown/select_dropdown.task ( scenario = scenario , session = session , field = 'Name' , xPath = 'HrAbsenceType' , value = absensetype ) 
			@name ( 'CalculateStartDate' ) startdate = control.evaluate ( expression = 'def StartDate = null
use (groovy.time.TimeCategory) {
  def today = new Date()
  StartDate = today+1
}
StartDate = StartDate .format("dd-MMM-yyy")

return StartDate ' ) 
			@name ( 'Set StartDate' ) /EBSArea/lib/web/text/set_text.task ( scenario = scenario , session = session , field = 'StartDate' , xPath = 'HrAbsenceStartDate' , value = startdate ) 
			@name ( 'CalculateEndDate' ) enddate = control.evaluate ( expression = 'def EndDate= null
use (groovy.time.TimeCategory) {
  def today = new Date()
   EndDate= today+50
}
 EndDate=  EndDate.format("dd-MMM-yyy")

return  EndDate' ) 
			@name ( 'Set EndDate' ) /EBSArea/lib/web/text/set_text.task ( scenario = scenario , session = session , xPath = 'HrAbsenceEndDate' , value = enddate ) 
			@name ( 'ClickCalculateButton' ) /EBSArea/lib/web/button/click_button.task ( scenario = scenario , session = session , name = 'Calculate Duration' ) 
			@name ( 'ClickNext' ) /EBSArea/lib/web/button/click_button.task ( scenario = scenario , session = session , name = 'Next' ) 
			@name ( 'ReadWarning' ) Iswarning = /EBSArea/lib/web/text/read_text.task ( scenario = scenario , session = session , field = 'Warning' , xPath = 'decrease the employee' ) 
			if Iswarning {
				assert.true ( expression = 'Iswarning=="This absence will decrease the employee''s PTO net entitlement to less than zero for one or more of their accrual plans."' ) 
			} 
			@name ( 'ClickNext' ) /EBSArea/lib/web/button/click_button.task ( scenario = scenario , session = session , name = 'Next' ) 
			@name ( 'Clickcancel' ) /EBSArea/lib/web/button/click_button.task ( scenario = scenario , session = session , name = 'Cancel' ) 
			@name ( 'ReadWarning' ) Iswarning = /EBSArea/lib/web/text/read_text.task ( scenario = scenario , session = session , field = 'Warning' , xPath = 'cancel' ) 
			if Iswarning {
				assert.true ( expression = 'Iswarning=="Do you want to cancel this action?"' ) 
			} 
			@name ( 'ClickYes' ) /EBSArea/lib/web/button/click_button.task ( scenario = scenario , session = session , name = 'Yes' ) 
			@disabled @name ( 'ClickHome' ) /EBSArea/lib/web/click/click_link.task ( scenario = scenario , session = session , name = 'Home' ) 
			@disabled @name ( 'ClickLogout' ) /EBSArea/lib/web/click/click_link.task ( scenario = scenario , session = session , name = 'Logout - EBSSIT' ) 
		} 
	} 
} 
@name ( 'Handle failure' ) catch {
	/EBSArea/lib/web/basic/capture_screen_web.task ( scenario = scenario , session = session , name = 'CreateAbsense' ) 
	error ^"Failed to perform AnnualleavecannotExceed[" + scenario +"] with session ["+ session +"]"^ 
} 
