@specification 1.1 
@param ( name = workbook ) 
@param ( name = sheet ) 
@param ( name = testCase ) 
@param ( name = scenario ) 
@param ( name = session ) 
@param ( name = environment ) 
@param ( name = summaryTable ) 
@param ( name = refTestCaseID ) 
@param ( name = TestCaseTableDict ) 
@param ( name = workbookSummary ) 
writeResults = control.evaluate ( expression = 'return false' ) 
@name ( 'Handle AR' ) if ^sheet != null && testCase != null && String.valueOf(sheet).trim().length() > 0 && String.valueOf(testCase).trim().length() > 0^ {
	@name ( 'Processing sheet [${sheet}]' ) try {
		cases = excel.read ( filePath = ^ workbook^ , sheetName = ^ sheet^ ) 
		@name ( 'Read headers' ) headers = control.evaluate ( expression = 'cases.getHeader().join(",").toUpperCase()' ) 
		@name ( 'Initiate cases' ) control.evaluate ( expression = 'cases' ) 
		cases = transform.columnrename ( columns = headers ) 
		cases = filter.comparison ( columns = 'ID' , operation = 'GREATER' , value = '0' ) 
		cases = filter.comparison ( columns = 'ID' , operation = 'EQUAL' , value = testCase ) 
		@name ( 'Raise test case not found error' ) if ^cases.size() < 2^ {
			error ^"Test case [" + testCase + "] not found on sheet [" + sheet + "] in workbook [" + workbook + "]"^ 
		} 
		@name ( 'Initiate cases' ) control.evaluate ( expression = 'cases' ) 
		cases = transform.expression ( expression = 'TESTCASENAME=TESTCASENAME.trim()' ) 
		cases = transform.expression ( expression = 'TESTCASENAME=TESTCASENAME.toUpperCase()' ) 
		@name ( 'Read header columns' ) headerColumns = control.evaluate ( expression = 'return cases.getHeader()' ) 
		headerColumns = transform.columnrename ( columns = 'columns' ) 
		recordset.create ( columns = 'ID' ) 
		results = recordset.save ( ) 
		result = control.evaluate ( expression = 'return null' ) 
		@name ( 'Handle AR Operations' ) control.iteration ( loopSource = ^=cases^ , loopVar = 'caseRef' , loopIndex = 'caseRefID' ) {
			startTime = /EBSArea/lib/common/record_start_time.task ( scenario = testCase ) 
			@name ( 'Resolve test case name' ) testCaseName = control.evaluate ( expression = 'return caseRef.TESTCASENAME' ) 
			@testcase @name ( 'Perform test [${sheet}-${testCaseName}-${caseRef.ID}]' ) try {
				@name ( 'Handle [Create AR Invoice Transaction]' ) if ^testCaseName.contains("ARINVOICETRANSACTION")^ {
					@name ( 'Calculate Invoice Date' ) invoiceDate = control.evaluate ( expression = 'def invoiceDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
invoiceDate = today
}
invoiceDate = invoiceDate.format("dd-MMM-yyy").toUpperCase()
return invoiceDate' ) 
					@name ( 'Invoice Transaction [${sheet}]: ID=${caseRef.ID}' ) result = /EBSArea/Finance/PageObjects/AR/java/invoiceTransaction.task ( scenario = scenario , session = session , source = ^caseRef['SOURCE']^ , selectClass = ^caseRef['SELECTCLASS']^ , glDate = invoiceDate , type = ^caseRef['TYPE']^ , name = ^caseRef['NAME']^ , description = ^caseRef['DESCRIPTION']^ , quantity = ^caseRef['QUANTITY']^ , unitPrice = ^caseRef['UNITPRICE']^ , distributions = ^caseRef['DISTRIBUTIONS']^ , currency = ^caseRef['CURRENCY']^ , rateType = ^caseRef['RATETYPE']^ , number = ^caseRef['NUMBER']^ , taxClassification = ^caseRef['TAXCLASSIFICATION']^ , environment = environment , contactName = ^caseRef['CONTACT NAME']^ , contactNumber = ^caseRef['CONTACT NUMBER']^ , attributeType = ^caseRef['ATTRIBUTE TYPE']^ , address = ^caseRef['ADDRESSLINE1']^ ) 
					'Write data summary table to excel and dictionary' {
						dataColumnList = ^return ['Test Case','Test Case ID','Invoice Number'];^ 
						dataValuesList = ^return [scenario,caseRef.ID,result.INVOICENUMBER];^ 
						/EBSArea/tests/scenarios/regression/tasks/write_data_summary_table_to_excel.task ( dataSummaryExcelPath = workbookSummary , dataSummarySheetName = ^environment.dataSummarySheetName^ , dataSummaryColumnList = dataColumnList , dataSummaryValuesList = dataValuesList ) 
						/EBSArea/tests/scenarios/regression/tasks/create_table_with_keyvalues_add_to_inmemory_dict.task ( dataSummaryColumnList = dataColumnList , dataSummaryValuesList = dataValuesList , inputDictionary = TestCaseTableDict , ID = ^caseRef.ID^ ) 
					} 
				} 
				@name ( 'Handle [Credit Invoice Balance]' ) if ^testCaseName.contains("CREDITINVOICEBALANCE")^ {
					@name ( 'Read Invoice Number' ) invoiceNumber = /EBSArea/tests/scenarios/regression/tasks/get_value_from_inmemory_dict_table.task ( tableNameOrRefCaseName = refTestCaseID , tableColumnName = 'Invoice Number' , testCaseTableDict = TestCaseTableDict ) 
					@name ( 'Credit Invoice Balance [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/creditInvoiceBalance.task ( scenario = scenario , session = session , number = invoiceNumber ) 
				} 
				@name ( 'Handle [Process Receipt And Allocate]' ) if ^testCaseName.contains("PROCESSRECEIPTANDALLOCATE")^ {
					@name ( 'Read Invoice Number' ) invoiceNumber = /EBSArea/tests/scenarios/regression/tasks/get_value_from_inmemory_dict_table.task ( tableNameOrRefCaseName = refTestCaseID , tableColumnName = 'Invoice Number' , testCaseTableDict = TestCaseTableDict ) 
					@name ( 'Calculate Receipt Number' ) receiptNumber = control.evaluate ( expression = 'def receiptNumber = null
use (groovy.time.TimeCategory) {
def today = new Date()
receiptNumber = today
}
receiptNumber = receiptNumber.format("ddhhmmss")
return receiptNumber
' ) 
					@name ( 'Process Receipt And Allocate [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/processReceiptAndAllocate.task ( scenario = scenario , session = session , receiptMethod = ^caseRef['RECEIPTMETHOD']^ , receiptNumber = receiptNumber , receiptAmount = ^caseRef['RECEIPTAMOUNT']^ , contextValue = ^caseRef['CONTEXTVALUE']^ , receiptInfoMethod = ^caseRef['RECEIPTINFOMETHOD']^ , transNumber = invoiceNumber , receiptMethodAccount = ^caseRef['RECEIPTMETHODACCOUNT']^ , environment = environment ) 
				} 
				@name ( 'Handle [Process Foreign Currency Receipt And Allocate]' ) if ^testCaseName.contains("PROCESSFOREIGNCURRENCYRECEIPTANDALLOCATE")^ {
					@name ( 'Calculate Invoice Date' ) invoiceDate = control.evaluate ( expression = 'def invoiceDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
invoiceDate = today
}
invoiceDate = invoiceDate.format("dd-MMM-yyy").toUpperCase()
return invoiceDate' ) 
					@name ( 'Read Invoice Number' ) invoiceNumber = /EBSArea/tests/scenarios/regression/tasks/get_value_from_inmemory_dict_table.task ( tableNameOrRefCaseName = refTestCaseID , tableColumnName = 'Invoice Number' , testCaseTableDict = TestCaseTableDict ) 
					@name ( 'Calculate Receipt Number' ) receiptNumber = control.evaluate ( expression = 'def receiptNumber = null
use (groovy.time.TimeCategory) {
def today = new Date()
receiptNumber = today
}
receiptNumber = receiptNumber.format("ddhhmmss")
return receiptNumber
' ) 
					@name ( 'Process FC Receipt And Allocate [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/processFCReceiptAndAllocate.task ( scenario = scenario , session = session , receiptMethod = ^caseRef['RECEIPTMETHOD']^ , receiptNumber = receiptNumber , receiptAmount = ^caseRef['RECEIPTAMOUNT']^ , contextValue = ^caseRef['CONTEXTVALUE']^ , receiptInfoMethod = ^caseRef['RECEIPTINFOMETHOD']^ , transNumber = invoiceNumber , allocatedReceiptAmount = ^caseRef['ALLOCATEDRECEIPTAMOUNT']^ , rateDate = invoiceDate , rateType = ^caseRef['RATETYPE']^ , receiptMethodAccount = ^caseRef['RECEIPTMETHODACCOUNT']^ , environment = environment ) 
				} 
				@name ( 'Handle [Verify Transaction Balance]' ) if ^testCaseName.contains("VERIFYTRANSACTIONBALANCE")^ {
					@name ( 'Read Invoice Number' ) invoiceNumber = /EBSArea/tests/scenarios/regression/tasks/get_value_from_inmemory_dict_table.task ( tableNameOrRefCaseName = refTestCaseID , tableColumnName = 'Invoice Number' , testCaseTableDict = TestCaseTableDict ) 
					@name ( 'Verify Transaction Balance [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/verifyTransactionBalance.task ( scenario = scenario , session = session , number = invoiceNumber ) 
				} 
				@name ( 'Handle [Create New Customer]' ) if ^testCaseName.contains("CREATENEWCUSTOMER")^ {
					@name ( 'Calculate Organization Name' ) orgName = control.evaluate ( expression = 'def orgName = null
use (groovy.time.TimeCategory) {
def today = new Date()
orgName = today
}
orgName = "AutoTest"+orgName.format("ddhhmmss")
return orgName
' ) 
					@name ( 'Resolve organization name' ) orgNameRef = control.evaluate ( expression = 'return caseRef[''ORGANIZATIONNAME'']+"_"+new java.text.SimpleDateFormat("HHMMSS").format(java.util.Calendar.getInstance().getTime())' ) 
					@name ( 'Create New Customer [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/web/createNewCustomer.task ( scenario = scenario , session = session , country = ^caseRef['COUNTRY']^ , addressLine1 = ^caseRef['ADDRESSLINE1']^ , addressLine2 = ^caseRef['ADDRESSLINE2']^ , townOrCity = ^caseRef['TOWNORCITY']^ , postCode = ^caseRef['POSTCODE']^ , operatingUnit = ^caseRef['OPERATINGUNIT']^ , purpose1 = ^caseRef['PURPOSE1']^ , purpose2 = ^caseRef['PURPOSE2']^ , billToLocation = ^caseRef['BILLTOLOCATION']^ , organizationName = orgNameRef ) 
					'Write data summary table to excel and dictionary' {
						dataColumnList = ^return ['Test Case','Test Case ID','Organization Name'];^ 
						dataValuesList = ^return [scenario,caseRef.ID,orgNameRef];^ 
						/EBSArea/tests/scenarios/regression/tasks/write_data_summary_table_to_excel.task ( dataSummaryExcelPath = workbookSummary , dataSummarySheetName = ^environment.dataSummarySheetName^ , dataSummaryColumnList = dataColumnList , dataSummaryValuesList = dataValuesList ) 
						/EBSArea/tests/scenarios/regression/tasks/create_table_with_keyvalues_add_to_inmemory_dict.task ( dataSummaryColumnList = dataColumnList , dataSummaryValuesList = dataValuesList , inputDictionary = TestCaseTableDict , ID = ^caseRef.ID^ ) 
					} 
				} 
				@name ( 'Handle [Add Additional Customer Accounts And Addresses]' ) if ^testCaseName.contains("ADDADDITIONALCUSTOMERACCOUNTS")^ {
					@name ( 'Read Organization Name' ) orgName = /EBSArea/tests/scenarios/regression/tasks/get_value_from_inmemory_dict_table.task ( tableNameOrRefCaseName = refTestCaseID , tableColumnName = 'Organization Name' , testCaseTableDict = TestCaseTableDict ) 
					@name ( 'Add Additional Customer Accounts and Address [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/web/addAdditionalCustomer.task ( scenario = scenario , session = session , customerName = orgName , operatingUnit = ^caseRef['OPERATINGUNIT1']^ , purpose1 = ^caseRef['PURPOSE1']^ , purpose2 = ^caseRef['PURPOSE2']^ , billToLocation = ^caseRef['BILLTOLOCATION']^ , prefix = ^caseRef['PREFIX']^ , firstName = ^caseRef['FIRSTNAME']^ , lastName = ^caseRef['LASTNAME']^ , phoneCountryCode = ^caseRef['COUNTRYCODE']^ , phoneNumber = ^caseRef['PHONENUMBER']^ , country = ^caseRef['COUNTRY']^ , addressLine1 = ^caseRef['ADDRESSLINE1']^ , addressLine2 = ^caseRef['ADDRESSLINE2']^ , townOrCity = ^caseRef['TOWNORCITY']^ , postCode = ^caseRef['POSTCODE']^ , anotherRole = ^caseRef['ANOTHERROLE']^ ) 
				} 
				@name ( 'Handle [Enter Miscellaneous Receipts]' ) if ^testCaseName.contains("ENTERMISCELLANEOUSRECEIPTS")^ {
					@name ( 'Calculate Invoice Date' ) invoiceDate = control.evaluate ( expression = 'def invoiceDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
invoiceDate = today
}
invoiceDate = invoiceDate.format("dd-MMM-yyy").toUpperCase()
return invoiceDate' ) 
					@name ( 'Calculate Receipt Number' ) receiptNumber = control.evaluate ( expression = 'def receiptNumber = null
use (groovy.time.TimeCategory) {
def today = new Date()
receiptNumber = today
}
receiptNumber = receiptNumber.format("ddhhmmss")
return receiptNumber
' ) 
					@name ( 'Miscellaneous Receipts [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/miscellaneousReceipts.task ( scenario = scenario , session = session , receiptMethod = ^caseRef['RECEIPTMETHOD']^ , receiptNumber = receiptNumber , receiptAmount = ^caseRef['RECEIPTAMOUNT']^ , receiptType = ^caseRef['RECEIPTTYPE']^ , contextValue = ^caseRef['CONTEXTVALUE']^ , receiptInfoMethod = ^caseRef['RECEIPTINFOMETHOD']^ , name = ^caseRef['NAME']^ , activity = ^caseRef['ACTIVITY']^ , taxCode = ^caseRef['TAXCODE']^ , receiptMethodAccount = ^caseRef['RECEIPTMETHODACCOUNT']^ , environment = environment ) 
					@name ( 'Print Receipt Number' ) console.write ( data = ^="Receipt [" + receiptNumber + "] created for test case [" + scenario +"]"^ ) 
					'Write data summary table to excel and dictionary' {
						dataColumnList = ^return ['Test Case','Test Case ID','Miscellaneous Receipt'];^ 
						dataValuesList = ^return [scenario,caseRef.ID,receiptNumber];^ 
						/EBSArea/tests/scenarios/regression/tasks/write_data_summary_table_to_excel.task ( dataSummaryExcelPath = workbookSummary , dataSummarySheetName = ^environment.dataSummarySheetName^ , dataSummaryColumnList = dataColumnList , dataSummaryValuesList = dataValuesList ) 
						/EBSArea/tests/scenarios/regression/tasks/create_table_with_keyvalues_add_to_inmemory_dict.task ( dataSummaryColumnList = dataColumnList , dataSummaryValuesList = dataValuesList , inputDictionary = TestCaseTableDict , ID = ^caseRef.ID^ ) 
					} 
				} 
				@name ( 'Handle [ProcessMultipleReceiptsAsPartOfBatch]' ) if ^testCaseName.contains("PROCESSMULTIPLERECEIPTSASPARTOFBATCH")^ {
					@name ( 'Calculate Receipt No' ) receiptNo = control.evaluate ( expression = 'return new java.text.SimpleDateFormat("HHMMSS").format(java.util.Calendar.getInstance().getTime())' ) 
					@name ( 'Process Multiple Receipts [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/processMultipleReceipts.task ( scenario = scenario , session = session , batchType = ^caseRef['BATCHTYPE']^ , batchSource = ^caseRef['BATCHSOURCE']^ , count = ^caseRef['COUNT']^ , amount = ^caseRef['AMOUNT']^ , receiptNumber = ^caseRef['RECEIPTNUMBER']+"_"+receiptNo^ , receiptType = ^caseRef['RECEIPTTYPE']^ , receiptAmount = ^caseRef['RECEIPTAMOUNT']^ , contextValue = ^caseRef['CONTEXTVALUE']^ , receiptInfoMethod = ^caseRef['RECEIPTINFOMETHOD']^ , receiptNumber2 = ^caseRef['RECEIPTNUMBER2']+"_"+receiptNo^ , receiptAmount2 = ^caseRef['RECEIPTAMOUNT2']^ , customerNumber = ^caseRef['CUSTOMERNUMBER']^ , comments = ^caseRef['COMMENTS']^ , receiptNumber3 = ^caseRef['RECEIPTNUMBER3']+"_"+receiptNo^ , receiptAmount3 = ^caseRef['RECEIPTAMOUNT3']^ , receiptType3 = ^caseRef['RECEIPTTYPE3']^ , paidByName = ^caseRef['PAIDBYNAME']^ , activity = ^caseRef['ACTIVITY']^ , taxCode = ^caseRef['TAXCODE']^ , comments3 = ^caseRef['COMMENTS3']^ , glAccount = ^caseRef['GLACCOUNT']^ , environment = environment ) 
				} 
				@name ( 'Handle [Process Receipt Unidentified]' ) if ^testCaseName.contains("PROCESSRECEIPTUNIDENTIFIED")^ {
					@name ( 'Calculate Invoice Date' ) invoiceDate = control.evaluate ( expression = 'def invoiceDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
invoiceDate = today
}
invoiceDate = invoiceDate.format("dd-MMM-yyy").toUpperCase()
return invoiceDate' ) 
					@name ( 'Calculate Receipt Number' ) receiptNumber = control.evaluate ( expression = 'def receiptNumber = null
use (groovy.time.TimeCategory) {
def today = new Date()
receiptNumber = today
}
receiptNumber = receiptNumber.format("ddhhmmss")
return receiptNumber
' ) 
					@name ( 'Receipt Unidentified [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/receiptUnidentified.task ( scenario = scenario , session = session , receiptMethod = ^caseRef['RECEIPTMETHOD']^ , receiptNumber = receiptNumber , receiptAmount = ^caseRef['RECEIPTAMOUNT']^ , contextValue = ^caseRef['CONTEXTVALUE']^ , receiptInfoMethod = ^caseRef['RECEIPTINFOMETHOD']^ , receiptMethodAccount = ^caseRef['RECEIPTMETHODACCOUNT']^ , receiptInformation = 'Receipts Method.BACS' , environment = environment ) 
				} 
				@name ( 'Handle [Run Auto Invoicing Program]' ) if ^testCaseName.contains("RUNAUTOINVOICINGPROGRAM")^ {
					@name ( 'Calculate Default Date' ) defaultDate = control.evaluate ( expression = 'def defaultDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
defaultDate = today
}
defaultDate = defaultDate.format("dd-MMM-yyy").toUpperCase()
return defaultDate' ) 
					@name ( 'Auto Invoicing Program [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/autoInvoicingProgram.task ( scenario = scenario , session = session , name = ^caseRef['NAME']^ , numberOfInstances = ^caseRef['NUMBEROFINSTANCES']^ , organization = ^caseRef['ORGANIZATION']^ , invoiceSource = ^caseRef['INVOICESOURCE']^ , defaultDate = defaultDate , environment = environment ) 
				} 
				@name ( 'Handle [Print New Invoices]' ) if ^testCaseName.contains("PRINTNEWINVOICES")^ {
					@name ( 'Calculate From Date' ) fromDate = control.evaluate ( expression = 'def fromDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
fromDate = today
}
fromDate = fromDate.format("dd-MMM-yyy").toUpperCase()
return fromDate' ) 
					@name ( 'Calculate To Date' ) toDate = control.evaluate ( expression = 'def toDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
toDate = today-1
}
toDate  = toDate .format("dd-MMM-yyy").toUpperCase()
return toDate' ) 
					@name ( 'Print New Invoice Report [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/printNewInvoiceReport.task ( scenario = scenario , session = session , name = ^caseRef['NAME']^ , reports = ^caseRef['REPORTS']^ , reportsOperatingUnit = ^caseRef['REPORTINGOPERATINGUNIT']^ , orderBy = ^caseRef['ORDERBY']^ , transactionClass = ^caseRef['TRANSACTIONCLASS']^ , transactionType = ^caseRef['TRANSACTIONTYPE']^ , openInvoicesOnly = ^caseRef['OPENINVOICESONLY']^ , printDateLow = toDate , printDateHigh = fromDate , environment = environment ) 
				} 
				@name ( 'Handle [Make Financial Adjustment To Invoice]' ) if ^testCaseName.contains("MAKEFINANCIALADJUSTMENTTOANINVOICE")^ {
					@name ( 'Read Invoice Number' ) invoiceNumber = /EBSArea/tests/scenarios/regression/tasks/get_value_from_inmemory_dict_table.task ( tableNameOrRefCaseName = refTestCaseID , tableColumnName = 'Invoice Number' , testCaseTableDict = TestCaseTableDict ) 
					@name ( 'Financial Adjustment To Invoice [${sheet}]: ID=${caseRef.ID}' ) result = /EBSArea/Finance/PageObjects/AR/java/financialAdjustmentToInvoice.task ( scenario = scenario , session = session , number = invoiceNumber , glAccount = ^caseRef['GLACCOUNT']^ , activityName = ^caseRef['ACTIVITYNAME']^ , type = ^caseRef['TYPE1']^ , amount = ^caseRef['AMOUNT']^ , reason = ^caseRef['REASON']^ , comments = ^caseRef['COMMENTS']^ , environment = environment ) 
					'Write data summary table to excel and dictionary' {
						dataColumnList = ^return ['Test Case','Test Case ID','Adjustment Number'];^ 
						dataValuesList = ^return [scenario,caseRef.ID,result.ADJUSTMENTNUMBER];^ 
						/EBSArea/tests/scenarios/regression/tasks/write_data_summary_table_to_excel.task ( dataSummaryExcelPath = workbookSummary , dataSummarySheetName = ^environment.dataSummarySheetName^ , dataSummaryColumnList = dataColumnList , dataSummaryValuesList = dataValuesList ) 
						/EBSArea/tests/scenarios/regression/tasks/create_table_with_keyvalues_add_to_inmemory_dict.task ( dataSummaryColumnList = dataColumnList , dataSummaryValuesList = dataValuesList , inputDictionary = TestCaseTableDict , ID = ^caseRef.ID^ ) 
					} 
				} 
				@name ( 'Handle [Run AR Create Accounting]' ) if ^testCaseName.contains("RUNARCREATEACCOUNTING")^ {
					@name ( 'Create Accounting [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AP/java/createAccounting.task ( scenario = scenario , session = session , name = ^caseRef['NAME']^ , ledger = ^caseRef['LEDGER']^ , mode = ^caseRef['MODE']^ , errorsOnly = ^caseRef['ERRORSONLY']^ , report = ^caseRef['REPORT']^ , transferToGL = ^caseRef['TRANSFERTOGL']^ , postInGL = ^caseRef['POSTINGL']^ , userTransactionIdentifier = ^caseRef['USERTRANSACTIONIDENTIFIER']^ , environment = environment ) 
				} 
				@name ( 'Handle [Transfer Journal Entries To GL]' ) if ^testCaseName.contains("TRANSFERJOURNALENTRIESTOGL")^ {
					@name ( 'Transfer Journal Entries To GL [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AP/java/transferJournalEntriesToGL.task ( scenario = scenario , session = session , name = ^caseRef['NAME']^ , ledger = ^caseRef['LEDGER']^ , postInGeneralLedger = ^caseRef['POSTINGENERALLEDGER']^ , environment = environment ) 
				} 
				@name ( 'Handle [Run Aged Debt Report]' ) if ^testCaseName.contains("RUNAGEDDEBTREPORT")^ {
					@name ( 'Calculate As Of Date' ) asOfDate = control.evaluate ( expression = 'def asOfDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
asOfDate = today
}
asOfDate = asOfDate.format("dd-MMM-yyy").toUpperCase()
return asOfDate' ) 
					@name ( 'Aged Debt Report [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/agedDebtReport.task ( scenario = scenario , session = session , name = ^caseRef['NAME']^ , reports = ^caseRef['REPORTS']^ , reportingContext = ^caseRef['REPORTINGCONTEXT']^ , reportSummary = ^caseRef['REPORTSUMMARY']^ , agingBucketName = ^caseRef['AGINGBUCKETNAME']^ , reportFormat = ^caseRef['REPORTFORMAT']^ , showOpenCredits = ^caseRef['SHOWOPENCREDITS']^ , showReceiptsAtRisk = ^caseRef['SHOWRECEIPTATRISK']^ , orderBy = ^caseRef['ORDERBY']^ , asOfDate = asOfDate , environment = environment , showOnAccount = ^caseRef['SHOWONACCOUNT']^ ) 
				} 
				@name ( 'Handle [Place Invoice On Hold]' ) if ^testCaseName.contains("PLACEINVOICEONHOLD")^ {
					@name ( 'Read Invoice Number' ) invoiceNumber = /EBSArea/tests/scenarios/regression/tasks/get_value_from_inmemory_dict_table.task ( tableNameOrRefCaseName = refTestCaseID , tableColumnName = 'Invoice Number' , testCaseTableDict = TestCaseTableDict ) 
					@name ( 'Calculate Invoice Date' ) invoiceDate = control.evaluate ( expression = 'def invoiceDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
invoiceDate = today
}
invoiceDate = invoiceDate.format("dd-MMM-yyy").toUpperCase()
return invoiceDate' ) 
					@name ( 'Place Invoice On Hold [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/placeInvoiceOnHold.task ( scenario = scenario , session = session , number = invoiceNumber , disputeAmount = ^caseRef['DISPUTEAMOUNT']^ , disputeDate = invoiceDate , placeInvoiceHold = ^caseRef['PLACEINVOICEHOLD']^ , takeOffInvoiceHold = ^caseRef['TAKEOFFINVOICEHOLD']^ ) 
				} 
				@name ( 'Handle [Take Invoice Off Hold]' ) if ^testCaseName.contains("TAKEINVOICEOFFHOLD")^ {
					@name ( 'Read Invoice Number' ) invoiceNumber = /EBSArea/tests/scenarios/regression/tasks/get_value_from_inmemory_dict_table.task ( tableNameOrRefCaseName = refTestCaseID , tableColumnName = 'Invoice Number' , testCaseTableDict = TestCaseTableDict ) 
					@name ( 'Calculate Invoice Date' ) invoiceDate = control.evaluate ( expression = 'def invoiceDate = null
use (groovy.time.TimeCategory) {
def today = new Date()
invoiceDate = today
}
invoiceDate = invoiceDate.format("dd-MMM-yyy").toUpperCase()
return invoiceDate' ) 
					@name ( 'Take Invoice Off Hold [${sheet}]: ID=${caseRef.ID}' ) /EBSArea/Finance/PageObjects/AR/java/placeInvoiceOnHold.task ( scenario = scenario , session = session , number = invoiceNumber , disputeAmount = '0' , disputeDate = invoiceDate , takeOffInvoiceHold = 'Yes' ) 
				} 
			} 
			@name ( 'Handle failures' ) catch {
				recordset.use ( recordset = results ) 
				recordset.append ( values = "${caseRef.ID}, 'Failed'" ) 
				results = recordset.save ( ) 
				error ^"Failed to navigate for test case [" + testCase + "] "^ 
			} 
			/EBSArea/lib/common/calculate_duration.task ( scenario = testCase , startTime = startTime ) 
		} 
	} 
	@name ( 'Report failure' ) catch {
		error ^"Failed to navigate for test case [" + testCase + "] "^ 
	} 
} 
control.evaluate ( expression = 'result' ) 
