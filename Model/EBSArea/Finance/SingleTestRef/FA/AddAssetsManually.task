@specification 1.1 
@param ( name = environment ) 
@param ( name = workbook ) 
@param ( name = sheet , default = 'TestCases' , type = automatic ) 
@param ( name = testCase ) 
env = environment.read ( name = environment ) 
@name ( 'Resolve scenario' ) scenario = control.evaluate ( expression = 'return "FA_TC04"' ) 
@name ( 'Resolve Oracle Forms session' ) session = control.evaluate ( expression = 'return "EBS_FIN_OF"' ) 
@testcase 'Executing Test Pack [${workbook}]]' {
	@testcase 'Process sheet [${sheet}] on workbook [${workbook}]' {
		@name ( 'Execute test cases' ) try {
			workbookInfo = file.info ( sourcePath = workbook ) 
			@name ( 'Resolve timestamp' ) timeStamp = control.evaluate ( expression = 'return new java.text.SimpleDateFormat("yyyyMMddHHMMSS").format(java.util.Calendar.getInstance().getTime())' ) 
			file.copy ( sourcePath = workbook , targetPath = ^env['artefacts'] + "/Result_Summary_" +timeStamp + "_" + workbookInfo.Name^ ) 
			cases = /EBSArea/lib/common/get_test_cases.task ( environment = environment , workbook = workbook , sheet = sheet , testCase = testCase , convertColumns = 'CURRENTCOST,UNITCHANGE' ) 
			@name ( 'Create All Results List' ) results = list.new ( ) 
			list.add ( list = results , entry = ^["ASSETNUMBER"]^ ) 
			@name ( 'Login as Local User' ) /EBSArea/Finance/PageObjects/Common/login_old.task ( password = ^env['local.password']^ , scenario = scenario , environment = environment , user = ^env['local.username']^ , session = ^env['session.web']^ ) 
			@name ( 'Process test cases' ) for caseRef in cases {
				@name ( 'Resolve ID' ) orqaRef = control.evaluate ( expression = "return caseRef['ID']" ) 
				@name ( 'Resolve test case' ) testCaseRef = control.evaluate ( expression = "return caseRef['TEST CASE NAME']" ) 
				@testcase 'Execute test case [${orqaRef}] with reference of [${testCaseRef}] from sheet [${sheet}]' {
					@name ( 'Navigate Asset Workbench' ) /EBSArea/Finance/PageObjects/Common/navigate_menu_items_old.task ( scenario = scenario , session = ^env['session.web']^ , mainMenu = 'RCUK FA Super User' , subMenu = 'Assets' , itemId = 'Assets' , itemName = 'Asset Workbench' ) 
					@name ( 'Calculate dates in service from' ) serviceFromDate = control.evaluate ( expression = 'def serviceFromDate = null
use (groovy.time.TimeCategory) {
  def today = new Date()
  serviceFromDate= today-11.month 
}
serviceFromDate = serviceFromDate.format("dd-MMM-yyy").toUpperCase()

return serviceFromDate' ) 
					@name ( 'Calculate dates in service from' ) serviceToDate = control.evaluate ( expression = 'def serviceToDate = null
use (groovy.time.TimeCategory) {
  def today = new Date()
  serviceToDate= today-5.month 
}
serviceToDate = serviceToDate.format("dd-MMM-yyy").toUpperCase()

return serviceToDate' ) 
					@name ( 'Add Assets' ) result = /EBSArea/Finance/PageObjects/FA/java/addAssets.task ( scenario = scenario , session = session , environment = environment , description = ^caseRef['DESCRIPTION']^ , category = ^caseRef['CATEGORY']^ , assetKey = ^caseRef['ASSETKEY']^ , book = ^caseRef['BOOK']^ , currentCost = ^caseRef['CURRENTCOST']^ , comments = ^caseRef['COMMENTS']^ , unitChange = ^caseRef['UNITCHANGE']^ , expenseAccount = ^caseRef['EXPENSEACCOUNT']^ , location = ^caseRef['LOCATION']^ , country = ^caseRef['COUNTRY']^ , city = ^caseRef['CITY']^ , locationUnit = ^caseRef['LOCATIONUNIT']^ , site = ^caseRef['SITE']^ , building = ^caseRef['BUILDING']^ , roomOrArea = ^caseRef['ROOMORAREA']^ ) 
					@name ( 'Return Asset Number' ) assetNumber = control.evaluate ( expression = 'result.ASSETNUMBER' ) 
					@name ( 'Navigate Asset Workbench from OF' ) /EBSArea/Finance/PageObjects/Common/navigate_java_menu_items.task ( scenario = scenario , session = session , title = 'RCUK FA Super User' , mainMenu = 'Assets' , itemName = 'Asset Workbench' , index = '1' ) 
					@name ( 'Delete Asset' ) /EBSArea/Finance/PageObjects/FA/java/deleteAsset.task ( scenario = scenario , session = session , assetNumber = assetNumber , closeApp = 'Yes' ) 
				} 
				@name ( 'Add Result to List' ) list.add ( list = results , entry = ^[result.ASSETNUMBER]^ ) 
			} 
			'Write results summary' {
				@name ( 'Write results to spread sheet' ) /EBSArea/lib/excel/writeSummary.task ( workbookSummary = ^env['artefacts'] + "/Result_Summary_" +timeStamp + "_" + workbookInfo.Name^ , summaryTable = results , resultsSheet = 'TestCases' , resultsCellName = 'R' , cellRange = 'A1:R1' , boarders = 'A1:R' ) 
			} 
		} 
		@name ( 'Handle failures' ) catch {
			@name ( 'Resolve task name' ) taskName = control.evaluate ( expression = "return workbookInfo.Name.substring(0, workbookInfo.Name.indexOf('.')  )" ) 
			@name ( 'Capture Screen' ) /EBSArea/lib/web/basic/capture_screen_web.task ( scenario = scenario , session = ^env['session.web']^ , name = ^taskName+"_fail"^ ) 
		} 
		'Close all active sessions' {
			webSessions = web.getsessions ( ) 
			javaSessions = java.getsessions ( ) 
			@name ( 'Is web session exist' ) if ^webSessions.contains(env['session.web'])^ {
				@name ( 'Close Web Session' ) /EBSArea/lib/web/basic/close_web_session.task ( session = ^env['session.web']^ ) 
			} 
			@name ( 'Is java session exist' ) if ^javaSessions.contains(session)^ {
				@name ( 'Close Java Session' ) /EBSArea/lib/java/basic/close_java_app.task ( session = session ) 
			} 
		} 
		control.evaluate ( expression = 'workbook' ) 
	} 
} 
